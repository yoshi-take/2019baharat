// *************************************************************************
//   ???{?b?g??	?F Baharat?i?o?n???b?g?j
//   ?T?v		?F ?T???V???C????HAL?i?n?[?h?E?G?A????w?j?t?@?C??
//   ????		?F ???
//   ????		?F parameter
//   ????		?F ???
//   ???l		?F ???
// **************************    ??    ??    *******************************
// 		v1.0		2019.5.5			TKR			?V?K?i?t?@?C????C???N???[?h?j
// *************************************************************************/

// ???d?R???p?C???}?~
#ifndef _PARAMETER_H
#define _PARAMETER_H

//**************************************************
// ?C???N???[?h?t?@?C???iinclude?j
//**************************************************
#include <typedefine.h>					// ??`
#include <common_define.h>				// ?????`
#include <iodefine.h>					// I/O
#include <stdio.h>						// ?W?????o??
		

//**************************************************
// ??`?i?@?\?I???j                               
//**************************************************
//#define FUNC_DIST_AUTO_THRESH											// ?Z???T?l?`???[?j???O?@?\?i??`?F?L???A????`?F?????i?Z???T????l???g?p?????j?j

//**************************************************
// ??`?idefine?j
//**************************************************
/* ????p?????[?^ */
#define PI					( 3.14159f )			// ??
#define	ENC_CONV			( 0.2222f )				// ?s?j?I??8T?C?X?p?[36T

/* ?????p?????[?^ */
/*?? hal.c?????A*/
#define TIRE_R						( 25.0f )								// ?^?C?????a [mm]
#define ROTATE_PULSE				( 2048 )								// ???[?^?[1????p???X??

#define ADJ_1STEP_SEARCH			( 1 )									// 1step??????Q?C???A?T?????s?p  (??????グ????R?i??)
#define ADJ_1STEP_DIRECT			( 1 )								// 1step??????Q?C???ADrive???s?p  (??????グ????R?i??)
#define DIST_1STEP(adj)				( PI * TIRE_R / ROTATE_PULSE * adj)		// 1?p???X??i????? [mm]

#define ENTRY_ADD					(2)										// ?i??????????4
#define ESCAPE_ADD					(2)									// ???????????5

/* ???H??????????? */
#define MAP_TURN_WAIT				( 100 )								// ???M?n????T??????????????????
#define MAP_SLA_WAIT				( 150 )								// ?X?????[???T??????????????????

/* ???s???x */
#define SEN_BACK_CHK_SPEED			( 180 ) 							// ?Z???T?`???[?j???O????????????x[mm/s]

/* ???? */
#define MOT_BACK_SEN_ADJ			( 73.0f )							// ??`??+a???i?Z???T?I?[?g?`???[?j???O??g?p????j

/* ?A?h???X */
#define	ADR_MAP						( 0x00100000 )						// ???H?o?b?N?A?b?v?p?A?h???X
#define	ADR_SEN						( 0x00101000 )						// ?Z???T?p?f?[?^?t???b?V???A?h???X

/* ?????Z???T(????ω???O) */
#define SEN_WAIT_CNT				( 175 )								// ?Z???T????????????i?????l?j
#define DIST_NO_WALL_DIV_FILTER		( 30 )								// ????????????l
#define DIST_REF_UP					( 400 )								// ????????f????????l????Z????l
#define DIST_NEAR_WALL				( 800 )								// ?N??????`???[?j???O??????O????l

/* ?????Z???T(????ω?) */
#define R_FRONT_WALL_GAIN			( 1.0f )							// ?E?O??Q?C???i???l??????j?A????m?l
#define L_FRONT_WALL_GAIN			( 1.0f )							// ???O??Q?C???i???l??????j?A????m?l
//#define R_45_WALL_GAIN				( 1.0f )							// ?E45?x?Q?C???i???l??????j?A????m?l
#define R_SIDE_WALL_GAIN			( 1.0f )							// ?E????Q?C???i???l??????j?A????m?l
//#define L_45_WALL_GAIN				( 1.0f )							// ??45?x?Q?C???i???l??????j?A????m?l
#define L_SIDE_WALL_GAIN			( 1.0f )							// ??????Q?C???i???l??????j?A????m?l
#define R_FRONT_WALL_CTRL_GAIN		( 1.0f )							// ?E?O??Q?C???i???l??????j?A???????????????l
#define L_FRONT_WALL_CTRL_GAIN		( 1.0f )							// ???O??Q?C???i???l??????j?A???????????????l
#define R_FRONT_WALL_NO_CTRL_GAIN	( 1.0f )							// ?E?O??Q?C???i???l??????j?A?????????????????l
#define L_FRONT_WALL_NO_CTRL_GAIN	( 1.0f )							// ???O??Q?C???i???l??????j?A?????????????????l
#define R_FRONT_WALL_HIT_GAIN		( 1.0f )							// ?E?O??Q?C???i???l??????j?A??????????????????????????l?i?O???}?E?X?????2mm?????l?j
#define L_FRONT_WALL_HIT_GAIN		( 1.0f )							// ???O??Q?C???i???l??????j?A??????????????????????????l?i?O???}?E?X?????2mm?????l?j
#define R_FRONT_SKEW_ERR1_GAIN		( 0.0f )							// ?E?O??A?????s??????l1
#define R_FRONT_SKEW_ERR2_GAIN		( 0.0f )							// ?E?O??A?????s??????l2
#define R_FRONT_SKEW_ERR3_GAIN		( 0.0f )							// ?E?O??A?????s??????l3
#define L_FRONT_SKEW_ERR1_GAIN		( 0.0f )							// ???O??A?????s??????l1
#define L_FRONT_SKEW_ERR2_GAIN		( 0.0f )							// ???O??A?????s??????l2
#define L_FRONT_SKEW_ERR3_GAIN		( 0.0f )							// ???O??A?????s??????l3

/* ????Z???T?l??AFUNC_DIST_AUTO_THRESH???L??????FALSH??f?[?^??????????A????????????l?????g?p????? */
#define R_FRONT_REF					( 379 )							// ?E?O??A???l
#define L_FRONT_REF					( 300 )							// ???O??A???l
//#define R_45_REF					( 580 )							// ?E45?x?A???l
//#define L_45_REF					( 440 )							// ??45?x?A???l
#define R_SIDE_REF					( 173 )							// ?E????A???l
#define L_SIDE_REF					( 206 )							// ??????A???l
#define R_FRONT_WALL				( 43 )							// ?E?O??A????m?l
#define L_FRONT_WALL				( 53 )							// ???O??A????m?l
//#define R_45_WALL					( 270 )							// ?E45?x?A????m?l
#define R_SIDE_WALL					( 63 )							// ?E????A????m?l
//#define L_45_WALL					( 180 )							// ??45?x?A????m?l
#define L_SIDE_WALL					( 81 )							// ??????A????m?l
#define R_FRONT_WALL_CTRL			( 82 )							// ?E?O??A???????????????l
#define L_FRONT_WALL_CTRL			( 100 )							// ???O??A???????????????l
#define R_FRONT_WALL_NO_CTRL		( 390 )							// ?E?O??A?????????????????l
#define L_FRONT_WALL_NO_CTRL		( 320 )							// ???O??A?????????????????l
#define R_FRONT_WALL_HIT			( 1050 )						// ?E?O??A??????????????????????????l?i?O???}?E?X?????2mm?????l?j
#define L_FRONT_WALL_HIT			( 1550 )						// ???O??A??????????????????????????l?i?O???}?E?X?????2mm?????l?j

/* ???O */
#define CTRL_LOG				( 1800 )							// 1msec????L?^???????O????
#define CTRL_LOG_CYCLE			( 2 )								// ????L?^????[msec]?i1????????l??NG?j
#define SET_LOG					( 100 )								// ?????????f?[?^????O??
#define DIST_LOG				( 5 )								// ?????Z???T????O????
#define POS_LOG					( 5 )								// 1msec????L?^?????u???O????
#define POS_LOG_INTERVAL		( 5 )								// ??msec????L?^

#define GYRO_SCALE_FACTOR			(16.4f)							
#define TEMP_SCALE_FACTOR			(333.87f)	
#define ACC_SCALE_FACTOR			(8192.0f)						

//**************************************************
// ?O???[?o?????
//**************************************************


//**************************************************
// 列挙体（enum）
//**************************************************

/* 制御方法 */
typedef enum{
	
	/* ========================================== */ 
	/*  パラメータを取得する際に使用するシンボル  */ 
	/* ========================================== */ 
	/* ---------- */
	/*  直進制御  */
	/* ---------- */
	PARAM_ST_TOP = 0,				// カウント用
	// ↓ 動作を追加する場合にはこの間に記載

		PARAM_ACC,					// 加速中(直進)
		PARAM_CONST,				// 等速中(直進)
		PARAM_DEC,					// 減速中(直進)
		PARAM_BACK_ACC,				// 加速中(後進)
		PARAM_BACK_CONST,			// 等速中(後進)
		PARAM_BACK_DEC,				// 減速中(後進)
		PARAM_SKEW_ACC,				// 加速中(斜め)
		PARAM_SKEW_CONST,			// 等速中(斜め)
		PARAM_SKEW_DEC,				// 減速中(斜め)
		PARAM_HIT_WALL,				// 壁あて制御
		PARAM_ACC_SMOOTH,			// 加速中(直進 cos近似)
		PARAM_CONST_SMOOTH,			// 等速中(直進 cos近似)
		PARAM_DEC_SMOOTH,			// 減速中(直進 cos近似)

	// ↑  動作を追加する場合にはこの間に記載
	PARAM_ST_BTM,					// カウント用
	
	/* -------- */
	/*  ターン  */
	/* -------- */
	PARAM_TURN_TOP,					// カウント用
	// ↓  動作を追加する場合にはこの間に記載

		PARAM_ACC_TURN,				// 加速中(超地信旋回)
		PARAM_CONST_TURN,			// 等速中(超地信旋回)
		PARAM_DEC_TURN,				// 減速中(超地信旋回)

	// ↑  動作を追加する場合にはこの間に記載
	PARAM_TURN_BTM,					// カウント用
	
	/* ------------ */
	/*  スラローム  */
	/* ------------ */
	PARAM_SLA_TOP,					// カウント用
	// ↓  動作を追加する場合にはこの間に記載

		PARAM_ENTRY_SURA,			// スラローム前の前進動作(スラローム)
		PARAM_ACC_SURA,				// 加速中(スラローム)
		PARAM_CONST_SURA,			// 等速中(スラローム)
		PARAM_DEC_SURA,				// 減速中(スラローム)
		PARAM_EXIT_SURA,			// スラローム後の前進動作(スラローム)

	// ↑  動作を追加する場合にはこの間に記載
	PARAM_SLA_BTM,					// カウント用
	
	
	/* ===================================================================== */ 
	/*  PARAM_setGainType()にてモードを決める際に引数として使用するシンボル  */ 
	/* ===================================================================== */ 
	PARAM_ST,						// 直進制御
	PARAM_TURN,						// 旋回制御
	PARAM_SLA,						// スラローム制御
	
	
	/* ====================================================== */ 
	/*  作成するデータ数をカウントするために使用するシンボル  */ 
	/* ====================================================== */ 
	PARAM_ST_MAX		= PARAM_ST_BTM   - PARAM_ST_TOP,		// 直進最大数
	PARAM_TURN_MAX		= PARAM_TURN_BTM - PARAM_TURN_TOP,		// 旋回最大数
	PARAM_SULA_MAX		= PARAM_SLA_BTM  - PARAM_SLA_TOP,		// スラローム最大数
	
	
	PARAM_NC = 0xff,
	
}enPARAM_MODE;

/* 動作速度 */
typedef enum{
	
	PARAM_VERY_SLOW = 0,	// 超低速
	PARAM_SLOW,				// 低速
	PARAM_NORMAL,			// 通常
	PARAM_FAST,				// 高速
	PARAM_VERY_FAST,		// 超高速
	
	PARAM_MOVE_SPEED_MAX
	
}enPARAM_MOVE_SPEED;

typedef enum{
	SLA_ENTRY_ADD = 0,
	SLA_ESCAPE_ADD,
	SLA_CORR_DIST_MAX,
}enSlaCorrDist;

//**************************************************
// 構造体（struct）
//**************************************************
/* 速度データ */
typedef struct{
	FLOAT			f_acc;					// 加速度（加速時）
	FLOAT			f_dec;					// 加速度（減速時）
	FLOAT			f_accAngle;				// 角加速度（加速時）
	FLOAT			f_decAngle;				// 角加速度（減速時）
}stSPEED;

/* ゲイン */
typedef struct {
	FLOAT			f_FF;					// フィードフォワード
	FLOAT 			f_FB_speed_kp;			// フィードバック、速度 比例制御
	FLOAT			f_FB_dist_kp;			// フィードバック、距離 比例制御
	FLOAT 			f_FB_dist_ki;			// フィードバック、距離 積分制御
	FLOAT			f_FB_angleS_kp;			// フィードバック、角速度 比例制御
	FLOAT			f_FB_angle_kp;			// フィードバック、角度 比例制御
	FLOAT			f_FB_angle_ki;			// フィードバック、角度 積分制御
	FLOAT			f_FB_wall_kp;			// フィードバック、壁 比例制御
	FLOAT			f_FB_wall_kd;			// フィードバック、壁 微分制御
}stGAIN;

//**************************************************
// プロトタイプ宣言（ファイル内で必要なものだけ記述）
//**************************************************
PUBLIC 	void 	PARAM_setCntType( BOOL bl_type );
PUBLIC 	FLOAT 	F_CNT2MM( LONG l_cnt );
PUBLIC	CONST 	stGAIN* PARAM_getGain( enPARAM_MODE en_mode );
PUBLIC	CONST 	stSPEED* PARAM_getSpeed( enPARAM_MODE en_mode );
PUBLIC 	FLOAT PARAM_getSlaCorrDist( enPARAM_MOVE_SPEED en_speed , enSlaCorrDist en_dist);
//PUBLIC stSLA* PARAM_getSra(enSLA_TYPE en_mode);

#endif